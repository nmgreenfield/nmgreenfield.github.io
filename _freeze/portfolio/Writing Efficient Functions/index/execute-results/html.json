{
  "hash": "2f517247891709f18bb1a756c63c2d45",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Writing Effecient Functions\"\ndescription: \"Functions used for fitting a model while removing outliers and imputing data.\"\norder: 4\ndraft: false\ntoc: false\n---\n\n\n\nThis function takes in a data set, variables, and a standard deviation threshold and removes the outliers from the specified variables. The default standard deviation threshold is set at 3. The function has a built in warning if a categorical variable is input and a stop if no numeric variables are input. The final output of the function is a data set with the rows with outliers removed. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremove_outliers <- function(data, ..., sd_thresh = 3){\n  \n  # grabs variables in ... and converts to character\n  vars <- quos(...)  #variables in ...\n  var_names <- sapply(vars, as_name) #converts vars to character\n\n  # finds any non-numeric vars and gives warning message\n  non_numeric_vars <- var_names[!sapply(data[var_names], is.numeric)]\n  \n  if (length(non_numeric_vars) > 0) {\n    warning(\"The following variables are categorical and will be ignored: \", \n            paste(non_numeric_vars, collapse = \", \"))\n  }\n\n  # finds numeric vars and only keeps rows that aren't outliers\n  numeric_vars <- var_names[sapply(data[var_names], is.numeric)]\n\n  if (length(numeric_vars) == 0) {\n    stop(\"No numeric variables provided for outlier detection.\")\n  }\n\n  z_scores <- data %>%\n    select(all_of(numeric_vars)) %>%\n    mutate(across(everything(), scale))\n\n  keep_rows <- apply(abs(z_scores), 1, function(row) all(row < sd_thresh))\n\n  # return final data set\n  return(data[keep_rows, ])\n}\n```\n:::\n\n\n\nThis function takes in a data set, variables, and an imputation function and imputes missing values from the specified variables. The default imputation function is using the mean. The function has a built in warning if a categorical variable is input. The final output of the function is a data set with missing numeric values imputed. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimpute_missing <- function(data, ..., impute_fun = mean){\n  \n  # grabs variables in ... and converts to character\n  vars <- enquos(...) #variables in ...\n  var_names <- sapply(vars, as_name) #converts vars to character\n  \n  impute_fun <- match.fun(impute_fun) #function from impute_fun\n\n  # finds any non-numeric vars and gives warning message\n  non_numeric_vars <- var_names[!sapply(data[, var_names], is.numeric)]\n  \n  if (length(non_numeric_vars) > 0) {\n    warning(\"The following variables are not numeric and will be skipped: \", \n            paste(non_numeric_vars, collapse = \", \"))\n  }\n  \n  # Apply imputation only to numeric columns\n  data %>%\n    mutate(across(\n      all_of(var_names),\n      ~ if (is.numeric(.)) {replace_na(., impute_fun(., na.rm = TRUE))} else {.}\n    ))\n}\n```\n:::\n\n\n\nFinally, this function takes in a data set, model formula, set of variables, a true or false for removing outliers and imputing, an imputation function, and a standard deviation threshold, and fits a linear regression model. The function first calls the previous two functions to remove outliers or impute if either of those are set to true. Once the data is cleaned, the function fits and returns the linear regression model. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_model <- function(data, mod_formula, ...,\n                      remove_outliers = FALSE, impute_missing = FALSE,\n                      impute_fun = mean, sd_thresh = 3) {\n  \n  vars <- enquos(...) #variables in ...\n  \n  # Remove outliers\n  if (remove_outliers) {\n    data <- remove_outliers(data, !!!vars, sd_thresh = sd_thresh)\n  }\n\n  # Impute\n  if (impute_missing) {\n    data <- impute_missing(data, !!!vars, impute_fun = impute_fun)\n  }\n\n  # Fit model\n  model <- lm(mod_formula, data = data)\n  return(model)\n}\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}