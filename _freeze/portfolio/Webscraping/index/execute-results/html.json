{
  "hash": "33cdef7621f91a7bba2a1315c94839c0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Webscraping\"\ndescription: \"Webscraping information about cheese.\"\norder: 6\ndraft: false\ntoc: false\n---\n\n\n\n\n\n# Fucntions for pulling all cheeses\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_text_from_page <- function(page, css_selector) {\n    \n  page %>%\n    html_elements(css_selector) %>%\n    html_text(trim = T)\n}\n\nget_url_from_page <- function(page, css_selector) {\n    \n  page %>%\n    html_elements(css_selector) %>%\n    html_attr(\"href\")\n}\n\nget_image_from_page <- function(page, css_selector) {\n    \n  page %>%\n    html_elements(css_selector) %>%\n    html_attr(\"src\")\n}\n\nscrape_page <- function(url) {\n    \n    # 1 second crawl delay\n    Sys.sleep(1)\n    \n    # Read the page\n    page <- read_html(url)\n    \n    # Grab elements from the page\n    cheese_names <- get_text_from_page(page, \".product-item\")\n    cheese_url <- get_url_from_page(page, \".product-item a\")\n    cheese_image <- get_image_from_page(page, \".product-item img\")\n    \n    # Clean cheese names\n    cheese_names <- cheese_names %>%\n      trimws()\n    \n    cheese_names <- ifelse(\n      str_detect(cheese_names, \"Stores >\"),\n      str_trim(str_extract(cheese_names, \"[^\\n]+$\")),\n      cheese_names\n      )\n    \n    # Full cheese URL\n    base_url <- \"https://www.cheese.com\"\n    cheese_url <- paste0(base_url, cheese_url)\n    cheese_url <- unique(cheese_url[!grepl(\"store\", cheese_url)]) #remove store links + duplicates\n    \n    # Find cheeses with image\n    has_image <- ifelse(grepl(\"static\", cheese_image), \"No\", \"Yes\")\n    \n    #Put page elements into a dataframe\n    cheeses <- data.frame(\n      cheese = cheese_names,\n      url = cheese_url,\n      image = has_image\n    )\n    \n    return(cheeses)\n}\n```\n:::\n\n\n\n# Pulling all cheeses\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_url <- \"https://www.cheese.com/alphabetical/?per_page=100\"\n\nurls_all_pages <- c(str_c(base_url,\n                          \"&page=\",\n                          1:21)\n                     )\n\nall_pages <- map(urls_all_pages, scrape_page)\n\nall_cheeses <- bind_rows(all_pages)\n\nhead(all_cheeses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                             cheese\n1           2 Year Aged Cumin Gouda\n2            3-Cheese Italian Blend\n3 30 Month Aged Parmigiano Reggiano\n4           3yrs Aged Vintage Gouda\n5                        Aarewasser\n6                  Abbaye de Belloc\n                                                             url image\n1                https://www.cheese.com/2-year-aged-cumin-gouda/   Yes\n2                 https://www.cheese.com/3-cheese-italian-blend/    No\n3 https://www.cheese.com/30-month-aged-parmigiano-reggiano-150g/   Yes\n4                https://www.cheese.com/3yrs-aged-vintage-gouda/   Yes\n5                             https://www.cheese.com/aarewasser/   Yes\n6                       https://www.cheese.com/abbaye-de-belloc/   Yes\n```\n\n\n:::\n:::\n\n\n\n# Functions for pulling detailed cheese info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_info <- function(text, fallback) {\n  if (length(text) == 0) {\n    return(fallback)\n  } else {\n    cleaned <- sub(\".*?:\\\\s*\", \"\", text) # Extract everything after \": \"\n    return(trimws(cleaned))\n  }\n}\n\nscrape_cheese <- function(url) {\n    \n    # 1 second crawl delay\n    Sys.sleep(1)\n    \n    # Read the page\n    page <- read_html(url)\n    \n    # Grab elements from the page\n    milk <- get_text_from_page(page, \".summary_milk\")\n    country <- get_text_from_page(page, \".summary_country\")\n    family <- get_text_from_page(page, \".summary_family\")\n    type <- get_text_from_page(page, \".summary_moisture_and_type\")\n    flavor <- get_text_from_page(page, \".summary_taste\")\n    \n    # Clean elements\n    milk <- clean_info(milk, \"No milk information available\")\n    country <- clean_info(country, \"No country information available\")\n    family <- clean_info(family, \"No family information available\")\n    type <- clean_info(type, \"No type information available\")\n    flavor <- clean_info(flavor, \"No flavor information available\")\n    \n    # Puts elements into data frame\n    cheese <- data.frame(\n      milk = milk,\n      country = country,\n      family = family,\n      type = type,\n      flavor = flavor\n    )\n}\n```\n:::\n\n\n\n# Pulling detailed cheese info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampled_cheeses <- all_cheeses %>%\n  sample_n(10)\n\ndetailed_cheeses <- sampled_cheeses$url %>%\n  map_df(scrape_cheese)\n\nfinal_cheese_info <- bind_cols(\n  sampled_cheeses %>% select(cheese),\n  detailed_cheeses\n)\n\nprint(final_cheese_info)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        cheese                                         milk\n1  Twig Farm Washed Rind Wheel Made from unpasteurized cow's or goat's milk\n2                  Woolly Rind           Made from pasteurized sheep's milk\n3              Tomme de Romans             Made from pasteurized cow's milk\n4                        Manur              Made from cow's or sheep's milk\n5     Organic Mountain Climber           Made from unpasteurized cow's milk\n6                 Heidi cheese             Made from pasteurized cow's milk\n7                    Gammelost                 Made from skimmed cow's milk\n8           Abbaye de Timadeuc             Made from pasteurized cow's milk\n9             Crayeux de Roncq           Made from unpasteurized cow's milk\n10              Shredded Bliss                No milk information available\n                    country                          family\n1             United States No family information available\n2             United States                       Camembert\n3                    France No family information available\n4                    Serbia No family information available\n5                   Austria No family information available\n6                 Australia No family information available\n7                    Norway                            Blue\n8                    France No family information available\n9                    France No family information available\n10 Canada and United States                      Mozzarella\n                          type\n1           semi-soft, artisan\n2           semi-soft, artisan\n3       semi-hard, blue-veined\n4                hard, artisan\n5                hard, artisan\n6                hard, artisan\n7            firm, blue-veined\n8                    semi-hard\n9  soft, artisan, soft-ripened\n10                   semi-soft\n                                                flavor\n1  floral, full-flavored, grassy, meaty, savory, tangy\n2             buttery, grassy, milky, mushroomy, sweet\n3                                 nutty, smooth, sweet\n4                                                salty\n5                                         sharp, spicy\n6                                                nutty\n7                                                sharp\n8                                        salty, smooth\n9                         full-flavored, strong, sweet\n10                                         mild, milky\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}