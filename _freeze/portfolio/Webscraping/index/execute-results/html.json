{
  "hash": "5e4e4bee378b395d04ce31139bf7d740",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Webscraping\"\ndescription: \"Webscraping information about cheese.\"\norder: 6\ndraft: false\ntoc: false\n---\n\n\n\n\n\n# Fucntions for pulling all cheeses\n\nThese functions are used to pull cheese information from the `cheese.com` website. `get_text_from_page` is used to get the names of each cheese, `get_url_from_page` is used to get the url for each cheese, and `get_image_from_page` is used to get the image for each cheese. `scrape page` is then used to call the other functions to get the information for all the cheeses.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_text_from_page <- function(page, css_selector) {\n    \n  page %>%\n    html_elements(css_selector) %>%\n    html_text(trim = T)\n}\n\nget_url_from_page <- function(page, css_selector) {\n    \n  page %>%\n    html_elements(css_selector) %>%\n    html_attr(\"href\")\n}\n\nget_image_from_page <- function(page, css_selector) {\n    \n  page %>%\n    html_elements(css_selector) %>%\n    html_attr(\"src\")\n}\n\nscrape_page <- function(url) {\n    \n    # 1 second crawl delay\n    Sys.sleep(1)\n    \n    # Read the page\n    page <- read_html(url)\n    \n    # Grab elements from the page\n    cheese_names <- get_text_from_page(page, \".product-item\")\n    cheese_url <- get_url_from_page(page, \".product-item a\")\n    cheese_image <- get_image_from_page(page, \".product-item img\")\n    \n    # Clean cheese names\n    cheese_names <- cheese_names %>%\n      trimws()\n    \n    cheese_names <- ifelse(\n      str_detect(cheese_names, \"Stores >\"),\n      str_trim(str_extract(cheese_names, \"[^\\n]+$\")),\n      cheese_names\n      )\n    \n    # Full cheese URL\n    base_url <- \"https://www.cheese.com\"\n    cheese_url <- paste0(base_url, cheese_url)\n    cheese_url <- unique(cheese_url[!grepl(\"store\", cheese_url)]) #remove store links + duplicates\n    \n    # Find cheeses with image\n    has_image <- ifelse(grepl(\"static\", cheese_image), \"No\", \"Yes\")\n    \n    #Put page elements into a dataframe\n    cheeses <- data.frame(\n      cheese = cheese_names,\n      url = cheese_url,\n      image = has_image\n    )\n    \n    return(cheeses)\n}\n```\n:::\n\n\n\n# Pulling all cheeses\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_url <- \"https://www.cheese.com/alphabetical/?per_page=100\"\n\nurls_all_pages <- c(str_c(base_url,\n                          \"&page=\",\n                          1:21)\n                     )\n\nall_pages <- map(urls_all_pages, scrape_page)\n\nall_cheeses <- bind_rows(all_pages)\n\nhead(all_cheeses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                             cheese\n1           2 Year Aged Cumin Gouda\n2            3-Cheese Italian Blend\n3 30 Month Aged Parmigiano Reggiano\n4           3yrs Aged Vintage Gouda\n5                        Aarewasser\n6                  Abbaye de Belloc\n                                                             url image\n1                https://www.cheese.com/2-year-aged-cumin-gouda/   Yes\n2                 https://www.cheese.com/3-cheese-italian-blend/    No\n3 https://www.cheese.com/30-month-aged-parmigiano-reggiano-150g/   Yes\n4                https://www.cheese.com/3yrs-aged-vintage-gouda/   Yes\n5                             https://www.cheese.com/aarewasser/   Yes\n6                       https://www.cheese.com/abbaye-de-belloc/   Yes\n```\n\n\n:::\n:::\n\n\n\n# Functions for pulling detailed cheese info\n\nThese functions are used to pull the detailed cheese information from the urls from the above function. `clean_info` is used to clean the information that gets scraped from the website and is called by `scrape_cheese` to pull info on milk, country, family, type, and flavor. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_info <- function(text, fallback) {\n  if (length(text) == 0) {\n    return(fallback)\n  } else {\n    cleaned <- sub(\".*?:\\\\s*\", \"\", text) # Extract everything after \": \"\n    return(trimws(cleaned))\n  }\n}\n\nscrape_cheese <- function(url) {\n    \n    # 1 second crawl delay\n    Sys.sleep(1)\n    \n    # Read the page\n    page <- read_html(url)\n    \n    # Grab elements from the page\n    milk <- get_text_from_page(page, \".summary_milk\")\n    country <- get_text_from_page(page, \".summary_country\")\n    family <- get_text_from_page(page, \".summary_family\")\n    type <- get_text_from_page(page, \".summary_moisture_and_type\")\n    flavor <- get_text_from_page(page, \".summary_taste\")\n    \n    # Clean elements\n    milk <- clean_info(milk, \"No milk information available\")\n    country <- clean_info(country, \"No country information available\")\n    family <- clean_info(family, \"No family information available\")\n    type <- clean_info(type, \"No type information available\")\n    flavor <- clean_info(flavor, \"No flavor information available\")\n    \n    # Puts elements into data frame\n    cheese <- data.frame(\n      milk = milk,\n      country = country,\n      family = family,\n      type = type,\n      flavor = flavor\n    )\n}\n```\n:::\n\n\n\n# Pulling detailed cheese info\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampled_cheeses <- all_cheeses %>%\n  sample_n(10)\n\ndetailed_cheeses <- sampled_cheeses$url %>%\n  map_df(scrape_cheese)\n\nfinal_cheese_info <- bind_cols(\n  sampled_cheeses %>% select(cheese),\n  detailed_cheeses\n)\n\nprint(final_cheese_info)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                             cheese\n1                                     Midnight Blue\n2                            Goat on a Hot Tin Roof\n3                                      Bra Duro DOP\n4  Sartori Limited Edition Family Heirloom Parmesan\n5                                          Barlocco\n6                                        Carboncino\n7                                    Wakatipu White\n8                                           Penbryn\n9                                    President Brie\n10                                            Meira\n                                      milk\n1      Made from unpasteurized goat's milk\n2        Made from pasteurized goat's milk\n3         Made from pasteurized cow's milk\n4         Made from pasteurized cow's milk\n5         Made from pasteurized cow's milk\n6  Made from cow's, goat's or sheep's milk\n7                     Made from cow's milk\n8                     Made from cow's milk\n9         Made from pasteurized cow's milk\n10                  Made from sheep's milk\n                                   country                          family\n1                            United States                            Blue\n2                                Australia No family information available\n3                                    Italy No family information available\n4                            United States                        Parmesan\n5                                 Scotland No family information available\n6                                    Italy No family information available\n7                              New Zealand                            Brie\n8  Great Britain, United Kingdom and Wales                           Gouda\n9                                   France                            Brie\n10                                    Iraq No family information available\n                          type                                 flavor\n1       semi-soft, blue-veined                  pungent, sharp, spicy\n2          fresh firm, artisan                      herbaceous, spicy\n3                         hard                          salty, savory\n4                hard, artisan caramel, fruity, nutty, piquant, sweet\n5                    semi-soft                          full-flavored\n6                   fresh soft        No flavor information available\n7           soft, soft-ripened                     buttery, mushroomy\n8                         hard  buttery, fruity, grassy, nutty, sweet\n9  soft, artisan, soft-ripened                buttery, creamy, subtle\n10                   semi-hard        No flavor information available\n```\n\n\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}