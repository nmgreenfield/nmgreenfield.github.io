{
  "hash": "ad09e64b0ee384b373db9b36133e9c5c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Generative Art\"\ndescription: \"\"\norder: 7\ndraft: false\ntoc: false\n---\n\n\n\n\n\n\n\n# *Fragmented Orbit*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nIn Fragmented Orbit, the artist explores the delicate tension between order and disarray. Using programmatic motion and layered forms, the piece traces the outline of a circle—traditionally a symbol of unity—only to disrupt it with sharp, scattered bars of warm and dark tones. The interplay of deep maroons and bright amber suggests an atmospheric transition, like a sunrise through fractured glass. It evokes a moment caught between movement and stillness, precision and spontaneity—a quiet chaos rendered in digital form.\n\n# *Viscous Drift*\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.gif)\n:::\n:::\n\n\n\nViscous Drift simulates the hypnotic undulations of a lava lamp—an homage to the liquid logic of motion and color. This work doesn’t just depict fluidity; it breathes it. Concentric waves of saturated hues ripple across the canvas, colliding and melting into each other with a dreamlike softness. There's no fixed center, no clear beginning—just a perpetual unfolding. The color palette, both synthetic and organic, pulls the viewer into a trance of perpetual transformation, evoking the slow-motion chaos of something alive yet utterly abstract.\n\n# Appendix\n\n## Function for *Fragmented Orbit*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolar_art_dual <- function(seed, n, palette_top, palette_bottom) {\n  set.seed(seed)\n  \n  #data generation\n  dat <- tibble(\n    x0 = runif(n, 0, 360), #start angle\n    y0 = abs(rnorm(n, 1, 0.3)), #start radius\n    x1 = x0 + runif(n, -10, 10), #end angle\n    y1 = y0 + rnorm(n, 0, 0.3), #end radius\n    shade = rnorm(n),\n    size = abs(rnorm(n, 1, 0.5))\n  ) %>%\n    mutate( # keep angles between 0 and 360\n      x0 = x0 %% 360,\n      x1 = x1 %% 360,\n      group = if_else( # Define top as angles between 270-360 or 0-90 degrees\n        (x0 >= 270 | x0 <= 90), \"top\", \"bottom\"\n      )\n    )\n  \n  # break up data to top and bottom\n  dat_top <- dat %>% filter(group == \"top\")\n  dat_bottom <- dat %>% filter(group == \"bottom\")\n  \n  #plot\n  ggplot() +\n    \n    #top data\n    geom_segment(\n      data = dat_top,\n      aes(x = x0, y = y0, xend = x1, yend = y1, colour = shade, linewidth = size),\n      show.legend = FALSE\n    ) +\n    scale_colour_gradientn(colours = palette_top) +\n    ggnewscale::new_scale_color() +\n    \n    #bottom data\n    geom_segment(\n      data = dat_bottom,\n      aes(x = x0, y = y0, xend = x1, yend = y1, colour = shade, linewidth = size),\n      show.legend = FALSE\n    ) +\n    scale_colour_gradientn(colours = palette_bottom) +\n    \n    coord_polar(start = 0) +\n    scale_x_continuous(limits = c(0, 360), expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    scale_size(range = c(0, 5)) +\n    theme_void()\n}\n```\n:::\n\n\n\n## Functions for *Viscous Drift*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Random palette - returns hex values\nsample_lava_palette <- function(n = 256) {\n  hues <- sort(runif(n))\n  sats <- runif(n, 0.7, 1) #saturation\n  vals <- runif(n, 0.8, 1) #brightness\n  hsv(hues, sats, vals)\n}\n\n# Single frame generator with time offset\nlava_frame <- function(frame, pixels = 400, speed = 100, freq = 3) {\n  z_offset <- frame / speed  # change speed of animation - divide by larger # to slow\n  \n  # create grid of pixels\n  grid <- long_grid(\n    x = seq(0, 1, length.out = pixels),\n    y = seq(0, 1, length.out = pixels)\n  ) |>\n    mutate(\n      paint = fracture(\n        x = x,\n        y = y,\n        z = z_offset,\n        noise = gen_simplex, # simplex noise generator to look like lava lamp\n        fractal = fbm, # fractal Brownian motion\n        octaves = 1, # can't notice changes when adjusting\n        frequency = freq # changes number of blobs, want to keep low\n      ),\n      paint = normalise(paint)\n    ) |>\n    as.array(value = paint)\n  \n  # generates color palette\n  lava_palette <- sample_lava_palette(256)\n  \n  # apply shading\n  img <- height_shade(grid, texture = lava_palette)\n  \n  image_read(img)\n}\n\n#gif function\nmake_lava_gif <- function(frames = 40, fps = 1, speed = 100, freq = 3) {\n  \n  # check that fps is a factor of 100 (needed for function)\n  if (100 %% fps != 0){\n    stop(\"fps must be a factor of 100\")\n  }\n  \n  # animates frames\n  images <- map(1:frames, ~ lava_frame(.x, speed = speed, freq = freq))\n  animation <- image_animate(image_join(images), fps = fps)\n  \n  return(animation)\n}\n```\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}